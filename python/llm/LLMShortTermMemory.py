from prompts import system, system_extra
import re

def generate_base_messages():
  return [
    {
      'role': 'system',
      'content': system + ' ' + system_extra
    }
  ]

def remove_text_inside_parentheses(s):
  # this function was generated by ChatGPT
  # The regex pattern here says to find anything that starts with "(" 
  # and ends with ")" and remove it.
  return re.sub(r'\(.*?\)', '', s).strip()

class LLMShortTermMemory:
  def __init__(self):
    self.messages = generate_base_messages()

  def add_user_message(self, content):
    self.messages.append({ 'role': 'user', 'content': content })

  def add_assistant_message(self, content):
    self.messages.append({ 'role': 'assistant', 'content': content })

  def clean_parentheses(self):
    # remove all parentheses-wrapped content, which are meant to be instructions to llm
    # rather than actual relevant chat history
    self.messages = [{
      'role': i['role'],
      'content': remove_text_inside_parentheses(i['content'])
    } for i in self.messages]

  def trim(self):
    # delete a fixed number of messages, to help appease token limits
    for i in range(4):
      if len(self.messages) > 1:
        del self.messages[1]


if __name__ == '__main__':
  print('hello world')
