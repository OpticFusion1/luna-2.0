from datetime import datetime
from helpers import obfuscate_prompt_username
import config

class Message(config.db.Model):
  """This table keeps track of all messages generated by Luna."""

  id = config.db.Column(
    config.db.Integer,
    primary_key=True,
    autoincrement=True
  )
  prompt = config.db.Column(
    config.db.Text,
    nullable=False
  )
  response = config.db.Column(
    config.db.Text,
    nullable=False
  )
  created_at = config.db.Column(
    config.db.DateTime,
    nullable=False,
    default=datetime.now
  )
  latency_llm = config.db.Column(
    config.db.Float,
    nullable=False,
  )
  latency_tts = config.db.Column(
    config.db.Float,
    nullable=False,
  )
class MessageSchema(config.ma.SQLAlchemySchema):
  class Meta:
    model = Message
  id=config.ma.auto_field()
  prompt=config.ma.auto_field()
  response=config.ma.auto_field()
  created_at=config.ma.auto_field()
  latency_llm=config.ma.auto_field()
  latency_tts=config.ma.auto_field()
message_schema = MessageSchema()
messages_schema = MessageSchema(many=True)
def db_message_get_all():
  messages = Message.query.all()
  return messages_schema.dump(messages)
def db_message_insert_one(prompt, response, latency_llm, latency_tts):
  message = Message(
    prompt=obfuscate_prompt_username(prompt),
    response=response,
    latency_llm=latency_llm,
    latency_tts=latency_tts
  )
  config.db.session.add(message)
  config.db.session.commit()

# create database
with config.app.app_context():
  config.db.create_all()
