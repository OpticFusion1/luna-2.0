from __main__ import app # this file declares db models, schema, and db functions for the flask server in server.py
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

# Order matters: Initialize SQLAlchemy before Marshmallow
db = SQLAlchemy(app)
ma = Marshmallow(app)

class Message(db.Model):
  """This table keeps track of all messages generated by Luna."""

  id = db.Column(
    db.Integer,
    primary_key=True,
    autoincrement=True
  )
  prompt = db.Column(
    db.Text,
    nullable=False
  )
  response = db.Column(
    db.Text,
    nullable=False
  )
  created_at = db.Column(
    db.DateTime,
    nullable=False,
    default=datetime.now
  )
  latency_llm = db.Column(
    db.Float,
    nullable=False,
  )
  latency_tts = db.Column(
    db.Float,
    nullable=False,
  )
class MessageSchema(ma.SQLAlchemySchema):
  class Meta:
    model = Message
  id=ma.auto_field()
  prompt=ma.auto_field()
  response=ma.auto_field()
  created_at=ma.auto_field()
  latency_llm=ma.auto_field()
  latency_tts=ma.auto_field()
message_schema = MessageSchema()
messages_schema = MessageSchema(many=True)
def db_message_get_all():
  messages = Message.query.all()
  return messages_schema.dump(messages)


with app.app_context():
  # create database
  db.create_all()

  # queries to run immediately after db creation
  # test_message = Message(
  #   prompt='test prompt',
  #   response='test response',
  #   latency_llm=0,
  #   latency_tts=0
  # )
  # db.session.add(test_message)
  # db.session.commit()
  # print(message_schema.dump(test_message))
