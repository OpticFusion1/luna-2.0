import re
from time import sleep
import config
from datetime import datetime
from execute_action import execute_or_enqueue_action
from enums import PRIORITY_QUEUE_PRIORITIES
import asyncio

# this function was generated by chatgpt also has a copy in /javascript
def convert_time_hms_string_to_ms(s):
  regex = r'(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?'
  match = re.search(regex, s)

  if not match:
    print(f'remindme.py: Cannot convert hms string "{s}" to ms!')

  hours = int(match.group(1)) if match.group(1) else 0
  minutes = int(match.group(2)) if match.group(2) else 0
  seconds = int(match.group(3)) if match.group(3) else 0

  ms = ((hours * 60 + minutes) * 60 + seconds) * 1000

  if ms > 86400000:
    print('remindme.py: Cannot exceed a total time greater than one day.')

  return ms

async def remind_me_loop():
  while True:
    await asyncio.sleep(10)
    now = datetime.now()
    for (reminder_prompt, reminder_datetime) in config.remind_me_prompts_and_datetime_queue:
      if now >= reminder_datetime:
        await execute_or_enqueue_action(reminder_prompt, PRIORITY_QUEUE_PRIORITIES['PRIORITY_REMIND_ME'])
    config.remind_me_prompts_and_datetime_queue = [
      (rp, rd) for (rp, rd) in config.remind_me_prompts_and_datetime_queue if now < rd
    ]

def remind_me_start_async_loop(loop):
  asyncio.set_event_loop(loop)
  loop.run_until_complete(remind_me_loop())
